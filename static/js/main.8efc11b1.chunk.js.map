{"version":3,"sources":["App.tsx","components/Photo.tsx","serviceWorker.ts","index.tsx"],"names":["query","Photo","props","className","src","alt","name","replace","results","RegExp","exec","window","location","search","decodeURIComponent","App","photos","useState","isRendered","setIsRendered","photosJSX","setPhotos","req","XMLHttpRequest","open","send","status","JSON","parse","responseText","data","map","item","push","images","original","url","key","slug","title","abort","searchHandlerButton","history","pushState","newUrl","protocol","host","pathname","path","length","type","placeholder","onChange","event","target","value","onKeyPress","onClick","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAKIA,E,8DCSWC,G,MAND,SAACC,GACX,OACI,yBAAKC,UAAU,QAAQC,IAAKF,EAAME,IAAKC,IAAKH,EAAMG,QDJpDC,EAAO,IAAIC,QAAQ,SAAU,QAE/BC,EADU,IAAIC,OAAO,OAASH,EAAO,qBACrBI,KAAKC,OAAOC,SAASC,QAOrCb,EALAQ,GAAYA,EAAQ,GAKZM,mBAAmBN,EAAQ,GAAGD,QAAQ,MAAO,MAJ7C,QAMZ,IA0DeQ,EA1DH,WACR,IAAIC,EAAqB,GADX,EAEsBC,oBAAS,GAF/B,mBAEPC,EAFO,KAEKC,EAFL,OAGiBF,mBAASD,GAH1B,mBAGPI,EAHO,KAGIC,EAHJ,KAKRR,EAAS,WACX,IAAKK,EAAY,CACb,IAAMI,EAAM,IAAIC,eAGhB,GAFAD,EAAIE,KAAK,MAAT,0FAAmGxB,EAAnG,cAAqH,GACrHsB,EAAIG,KAAK,MACU,MAAfH,EAAII,OACWC,KAAKC,MAAMN,EAAIO,cACvBC,KAAKC,KAAI,SAACC,GACbhB,EAAOiB,KAAK,kBAAC,EAAD,CAAO7B,IAAK4B,EAAKE,OAAOC,SAASC,IAAKC,IAAKL,EAAKM,KAAMjC,IAAK2B,EAAKO,YAEhFlB,EAAUL,GACVG,GAAc,GACdG,EAAIkB,UAKhB3B,IAEA,IAIM4B,EAAsB,WACxB,GAAI9B,OAAO+B,QAAQC,UAAW,CAC1B,IAAMC,EAASjC,OAAOC,SAASiC,SAAW,KAAOlC,OAAOC,SAASkC,KAAOnC,OAAOC,SAASmC,SAAW,MAAQ/C,EAC3GW,OAAO+B,QAAQC,UAAU,CAACK,KAAMJ,GAAS,GAAIA,GAC7CzB,GAAc,GACdN,MAUR,OACI,yBAAKV,UAAU,OACX,uDACsB,IAArBiB,EAAU6B,OAAe,+DAAqCjD,GAAc,qDAA2BA,GACxG,yBAAKG,UAAU,WACX,2BAAO+C,KAAK,OAAOC,YAAY,cAAcC,SAxB9B,SAACC,GACxBrD,EAAQqD,EAAMC,OAAOC,OAuB8DC,WAX5D,SAACH,GACN,UAAdA,EAAMhB,KACNI,OAUI,4BAAQgB,QAAShB,GAAqB,kBAAC,IAAD,CAAUtC,UAAU,WAE9D,yBAAKA,UAAU,kBACdiB,KEzDOsC,QACW,cAA7B/C,OAAOC,SAAS+C,UAEe,UAA7BhD,OAAOC,SAAS+C,UAEhBhD,OAAOC,SAAS+C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8efc11b1.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {FiSearch} from \"react-icons/all\";\nimport Photo from \"./components/Photo\";\n\nlet query: string\nconst name = 'q'.replace(/[[\\]]/g, '\\\\$&');\nconst regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n    results = regex.exec(window.location.search);\n// @ts-ignore\nif(!results || !results[2]){\n    query = 'hello'\n}\nelse {\n    // @ts-ignore\n    query = decodeURIComponent(results[2].replace(/\\+/g, ' '))\n}\nconst App = () => {\n    let photos: Array<any> = []\n    const [isRendered, setIsRendered] = useState(false)\n    const [photosJSX, setPhotos] = useState(photos)\n\n    const search = () => {\n        if (!isRendered) {\n            const req = new XMLHttpRequest();\n            req.open('GET', `https://api.giphy.com/v1/gifs/search?api_key=sASnbfCxLNIckaGMW3jWggs2rp1UT7PY&q=${query}&limit=10`, false);\n            req.send(null);\n            if (req.status === 200) {\n                const images = JSON.parse(req.responseText)\n                images.data.map((item: any) => {\n                    photos.push(<Photo src={item.images.original.url} key={item.slug} alt={item.title}/>)\n                })\n                setPhotos(photos)\n                setIsRendered(true)\n                req.abort()\n            }\n        }\n    }\n\n    search()\n\n    const searchHandlerInput = (event: any) => {\n        query = event.target.value\n    }\n\n    const searchHandlerButton = () => {\n        if (window.history.pushState) {\n            const newUrl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + '?q=' + query;\n            window.history.pushState({path: newUrl}, '', newUrl);\n            setIsRendered(false)\n            search()\n        }\n    }\n\n    const searchHandlerEnter = (event: any) => {\n        if( event.key === 'Enter'){\n            searchHandlerButton()\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>PHOTO SEARCH FROM GIPHY</h1>\n            {photosJSX.length === 0 ? <h2>Not found results for sentence: {query}</h2> : <h2>Results for sentence: {query}</h2>}\n            <div className=\"options\">\n                <input type=\"text\" placeholder=\"Insert text\" onChange={searchHandlerInput} onKeyPress={searchHandlerEnter}/>\n                <button onClick={searchHandlerButton}><FiSearch className=\"icon\"/></button>\n            </div>\n            <div className=\"photoContainer\">\n            {photosJSX}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport \"./Photo.css\"\n\nexport interface PhotoProps {\n    src: string,\n    alt: string\n}\n\nconst Photo = (props: PhotoProps) => {\n    return (\n        <img className=\"photo\" src={props.src} alt={props.alt}/>\n    )\n}\n\nexport default Photo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}